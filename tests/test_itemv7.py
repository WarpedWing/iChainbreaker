import os
import sys
from binascii import hexlify, unhexlify
from unittest import TestCase

# Ensure project root is on sys.path for direct imports
sys.path.insert(0, os.path.dirname(os.path.dirname(__file__)))

from biplist import Uid

from itemv7 import ItemV7, ns_keyed_unarchiver

ITEM1_DATA = unhexlify(
    """
070000000ae3040a8c0462706c6973743030d40102030405061c1d582476657273696f6e5824
6f626a65637473592461726368697665725424746f7012000186a0a607081112131455246e75
6c6cd4090a0b0c0d0e0f105624636c6173735f10165346496e697469616c697a6174696f6e56
6563746f725c5346436970686572746578745f1014534641757468656e7469636174696f6e43
6f646580058004800280034f1050447bfdd366eae1728bb8946e747403af16eacd74e1193ae7
ccd31330bcd02048b06d615a7d30a57a754a2cfd2c60fc01b6664f6a6022de29dcaa50f98921
5d7f9f3dbaad0609765eef609779560a01324f1010f1e51fc748fd03e4d48447c8bcaf02b24f
1020ad2bc9883fc6ed920422f19cb6958e18c931384a1048588c807d44a03e13ff97d2151617
185a24636c6173736e616d655824636c61737365735f101a5f534641757468656e7469636174
656443697068657274657874a3191a1b5f101a5f534641757468656e74696361746564436970
686572746578745d5f534643697068657274657874584e534f626a6563745f100f4e534b6579
65644172636869766572d11e1f54726f6f74800100080011001a0023002d00320037003e0044
004d0054006d007a0091009300950097009900ec00ff012201270132013b0158015c01790187
019001a201a501aa000000000000020100000000000000200000000000000000000000000000
01ac122c0a2848bb49dfd10d7313d654d828048fbf2d1cd0d5125d84716dca89beb3ff1f10d6
ef44469b0380ca3d18001a2431413331434545462d333039312d344642332d393731332d4244
4335334642454644363212a20a0a9a0662706c6973743030d40102030405061c1d5824766572
73696f6e58246f626a65637473592461726368697665725424746f7012000186a0a607081112
131455246e756c6cd4090a0b0c0d0e0f105624636c6173735f10165346496e697469616c697a
6174696f6e566563746f725c5346436970686572746578745f1014534641757468656e746963
6174696f6e436f646580058004800280034f11015d2bbe24f5e6dbbb4f31aa92589406e704a0
982d7ea61375d06aafe49c2391c8bb580eec55d599e6a9ccf4a5eb5c6f8e4d801ea921501114
6f3b20a594114cc4c5647468e425a7a649e2e0b40f72c76165ecde7c7bdd55c0704dda145961
c25c3abd19ddfd3eaada4e49a17a6f34a6a962eddf63e2d6bb6ff58d34e03c853fbdc78fec9b
a1cafd0fe85ff35e446a016b2fdfec2844b802f2b85b91d1513ef171a93073a2d572836e10aa
c972274a9b4fe3ceb5750fbeb1f162e5fafd233d00c197d876e6672ee23ad48d84d3307ccc29
e720e367eac8c79322c336b968577723a95769cf5a42d70ee771edbbbee557fcdfb7cb1bcba6
5b74f3003a9fb46ea64f517125685478662422c173dd5f4227874c3f327ddd20291ff17c918e
213d695999ae2aaa4aee493d1ad2d33b8c21867b90e0cc36f59b30327e0fdf5b8d99d61f1ddd
eda75f38dc7c4ebba39d9751f18ee0ed797aabe8e94f3dd020bb414c4f1010d13e5ae1be61ee
15b58936ad36337bf74f1020a65f233ae6b507bdc5f22fb9f1b05f19732c3d8d8083ff5ef013
51a48e13ef61d2151617185a24636c6173736e616d655824636c61737365735f101a5f534641
757468656e7469636174656443697068657274657874a3191a1b5f101a5f534641757468656e
74696361746564436970686572746578745d5f534643697068657274657874584e534f626a65
63745f100f4e534b657965644172636869766572d11e1f54726f6f74800100080011001a0023
002d00320037003e0044004d0054006d007a0091009300950097009901fa020d023002350240
02490266026a02870295029e02b002b302b80000000000000201000000000000002000000000
0000000000000000000002ba12dc0362706c6973743030d40102030405061c1d582476657273
696f6e58246f626a65637473592461726368697665725424746f7012000186a0a60708111213
1455246e756c6cd4090a0b0c0d0e0f105624636c6173735f10165346496e697469616c697a61
74696f6e566563746f725c5346436970686572746578745f1014534641757468656e74696361
74696f6e436f646580058004800280034f102063fb8949dc40411b343b9d6e35c8f2c3f2a5b7
6a6c5743217d76b3a5dfd82c804f101062426220f32e7bffab83de0b925313c14f1020edba6d
dd7890dadb7c7b1c4f638f630b0313424b618e1d9eee30fe3c70eb74a9d2151617185a24636c
6173736e616d655824636c61737365735f101a5f534641757468656e74696361746564436970
68657274657874a3191a1b5f101a5f534641757468656e746963617465644369706865727465
78745d5f534643697068657274657874584e534f626a6563745f100f4e534b65796564417263
6869766572d11e1f54726f6f74800100080011001a0023002d00320037003e0044004d005400
6d007a0091009300950097009900bc00cf00f200f70102010b0128012c014901570160017201
75017a000000000000020100000000000000200000000000000000000000000000017c1a2431
413331434545462d333039312d344642332d393731332d4244433533464245464436321806
""".replace('\n', '')
)
ITEM1_CLASS_KEY = unhexlify("af41f099b74ef11d2e65bbb63e9a3edca77b02ec2e4dc660b1a17a2783d71464")
ITEM1_METADATA_CLASS_KEY = unhexlify(
    "c4c8fb488f8d1f69f759cfd5a6250960413c07d68fd580a0661b482381c46be2"
)


class ItemV7Tests(TestCase):
    def test_exception_if_version_not_7(self):
        with self.assertRaisesRegex(Exception, 'version 7.*not 6'):
            ItemV7(b"\x06\x00\x00\x00")

    def test_get_keyclass(self):
        item = ItemV7(ITEM1_DATA)
        self.assertEqual(6, item.keyclass)

    def test_get_secret_data_wrapped_key(self):
        item = ItemV7(ITEM1_DATA)
        self.assertEqual(
            b"48bb49dfd10d7313d654d828048fbf2d1cd0d5125d84716dca89beb3ff1f10d6ef44469b0380ca3d",
            hexlify(item.encrypted_secret_data_wrapped_key),
        )

    def test_decrypt_secret_data_fails_with_bad_class_key(self):
        item = ItemV7(ITEM1_DATA)
        with self.assertRaises((AssertionError, ValueError)):
            print('integrity check fail expected:')
            item.decrypt_secret_data(b'\x00' * 32)

    def test_decrypt_secret_data(self):
        item = ItemV7(ITEM1_DATA)
        self.assertIn(b'foo-secret', item.decrypt_secret_data(ITEM1_CLASS_KEY))

    def test_decrypt_metadata(self):
        item = ItemV7(ITEM1_DATA)
        self.assertIn(b'musr', item.decrypt_metadata(ITEM1_METADATA_CLASS_KEY))


OBJ1 = {
    '$archiver': 'NSKeyedArchiver',
    '$objects': [
        '$null',
        {
            '$class': Uid(5),
            'SFAuthenticationCode': Uid(3),
            'SFCiphertext': Uid(2),
            'SFInitializationVector': Uid(4),
        },
        b'abcdef',
        b'123',
        b'xyzfgh',
        {
            '$classes': ['_SFAuthenticatedCiphertext', '_SFCiphertext', 'NSObject'],
            '$classname': '_SFAuthenticatedCiphertext',
        },
    ],
    '$top': {'root': Uid(1)},
    '$version': 100000,
}


class NsKeyedArchiverTest(TestCase):
    def test_unpack(self):
        self.assertEqual(
            {
                '$class': '_SFAuthenticatedCiphertext',
                'SFAuthenticationCode': b'123',
                'SFCiphertext': b'abcdef',
                'SFInitializationVector': b'xyzfgh',
            },
            ns_keyed_unarchiver(OBJ1),
        )
